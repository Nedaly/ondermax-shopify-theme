{% comment %}
  PDP UGC Carousel - Social proof with user-generated content
  Mobile-first swipe gallery with review overlays
{% endcomment %}

<div class="pdp-ugc-carousel color-{{ section.settings.color_scheme | default: 'background-1' }}">
  <div class="page-width">
    <div class="pdp-ugc-container">
      {% if section.settings.heading != blank %}
        <h2 class="pdp-ugc-heading {{ section.settings.heading_size | default: 'h2' }}">
          {{ section.settings.heading }}
        </h2>
      {% endif %}
      
      {% if section.settings.subheading != blank %}
        <p class="pdp-ugc-subheading">{{ section.settings.subheading }}</p>
      {% endif %}
      
      <div class="pdp-ugc-gallery" data-ugc-carousel>
        <div class="pdp-ugc-track" data-ugc-track>
          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'ugc_item' %}
                <div class="pdp-ugc-item" {{ block.shopify_attributes }}>
                  <div class="pdp-ugc-image-wrapper">
                    {% if block.settings.image != blank %}
                      <img 
                        src="{{ block.settings.image | image_url: width: 300 }}" 
                        alt="{{ block.settings.customer_name | default: 'Customer photo' }}"
                        loading="lazy"
                        class="pdp-ugc-image"
                      >
                    {% else %}
                      <div class="pdp-ugc-placeholder">
                        <span class="icon icon-person"></span>
                      </div>
                    {% endif %}
                    
                    {% if block.settings.review_text != blank %}
                      <div class="pdp-ugc-review-overlay">
                        <div class="pdp-ugc-stars">
                          {% for i in (1..5) %}
                            <span class="star {% if i <= block.settings.rating %}filled{% endif %}">â˜…</span>
                          {% endfor %}
                        </div>
                        <p class="pdp-ugc-review-text">{{ block.settings.review_text }}</p>
                        {% if block.settings.customer_name != blank %}
                          <span class="pdp-ugc-customer-name">{{ block.settings.customer_name }}</span>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                </div>
            {% endcase %}
          {% endfor %}
        </div>
        
        <div class="pdp-ugc-dots" data-ugc-dots>
          {% for block in section.blocks %}
            <button class="pdp-ugc-dot" data-dot="{{ forloop.index0 }}" aria-label="Go to UGC item {{ forloop.index }}"></button>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .pdp-ugc-carousel {
    padding: 2rem 0;
    background: rgb(var(--color-background));
  }
  
  .pdp-ugc-container {
    text-align: center;
  }
  
  .pdp-ugc-heading {
    margin-bottom: 1rem;
    color: rgb(var(--color-foreground));
  }
  
  .pdp-ugc-subheading {
    margin-bottom: 2rem;
    color: rgba(var(--color-foreground), 0.7);
    font-size: 1.1rem;
  }
  
  .pdp-ugc-gallery {
    position: relative;
    overflow: hidden;
    margin-bottom: 1rem;
  }
  
  .pdp-ugc-track {
    display: flex;
    transition: transform 0.3s ease-in-out;
    gap: 1rem;
  }
  
  .pdp-ugc-item {
    flex: 0 0 100%;
    position: relative;
  }
  
  .pdp-ugc-image-wrapper {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    aspect-ratio: 1;
    background: #f5f5f5;
  }
  
  .pdp-ugc-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .pdp-ugc-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f0f0f0;
    color: #999;
    font-size: 3rem;
  }
  
  .pdp-ugc-review-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: 1.5rem 1rem 1rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }
  
  .pdp-ugc-item:hover .pdp-ugc-review-overlay {
    transform: translateY(0);
  }
  
  .pdp-ugc-item:hover .pdp-ugc-image {
    transform: scale(1.05);
  }
  
  .pdp-ugc-stars {
    display: flex;
    gap: 0.2rem;
    margin-bottom: 0.5rem;
  }
  
  .pdp-ugc-stars .star {
    color: #ffcc00;
    font-size: 1.2rem;
  }
  
  .pdp-ugc-stars .star:not(.filled) {
    color: rgba(255, 255, 255, 0.3);
  }
  
  .pdp-ugc-review-text {
    font-size: 0.9rem;
    line-height: 1.3;
    margin-bottom: 0.5rem;
    font-style: italic;
  }
  
  .pdp-ugc-customer-name {
    font-size: 0.8rem;
    font-weight: 600;
    opacity: 0.9;
  }
  
  .pdp-ugc-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .pdp-ugc-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(var(--color-foreground), 0.3);
    cursor: pointer;
    transition: background 0.2s ease;
  }
  
  .pdp-ugc-dot.active {
    background: #1C8E8E; /* Ondermax Teal */
  }
  
  /* Desktop styles */
  @media screen and (min-width: 750px) {
    .pdp-ugc-carousel {
      padding: 3rem 0;
    }
    
    .pdp-ugc-track {
      gap: 2rem;
    }
    
    .pdp-ugc-item {
      flex: 0 0 calc(50% - 1rem);
    }
    
    .pdp-ugc-review-overlay {
      transform: translateY(0);
      background: rgba(0, 0, 0, 0.7);
    }
  }
  
  @media screen and (min-width: 990px) {
    .pdp-ugc-item {
      flex: 0 0 calc(33.333% - 1.33rem);
    }
  }
  
  @media screen and (min-width: 1200px) {
    .pdp-ugc-item {
      flex: 0 0 calc(25% - 1.5rem);
    }
  }
</style>

<script>
  class PDPUGCCarousel {
    constructor(container) {
      this.container = container;
      this.track = container.querySelector('[data-ugc-track]');
      this.dots = container.querySelectorAll('[data-ugc-dots] button');
      this.currentIndex = 0;
      this.totalSlides = this.dots.length;
      this.isAnimating = false;
      
      this.init();
    }
    
    init() {
      this.setupEventListeners();
      this.updateDots();
      this.startAutoplay();
    }
    
    setupEventListeners() {
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Touch/swipe support
      let startX = 0;
      let startY = 0;
      
      this.track.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      });
      
      this.track.addEventListener('touchend', (e) => {
        if (this.isAnimating) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const diffX = startX - endX;
        const diffY = startY - endY;
        
        // Only handle horizontal swipes
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          if (diffX > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
      });
      
      // Pause autoplay on hover
      this.container.addEventListener('mouseenter', () => this.pauseAutoplay());
      this.container.addEventListener('mouseleave', () => this.startAutoplay());
    }
    
    goToSlide(index) {
      if (this.isAnimating || index === this.currentIndex) return;
      
      this.isAnimating = true;
      this.currentIndex = index;
      
      this.track.style.transform = `translateX(-${index * 100}%)`;
      this.updateDots();
      
      setTimeout(() => {
        this.isAnimating = false;
      }, 300);
    }
    
    nextSlide() {
      const nextIndex = (this.currentIndex + 1) % this.totalSlides;
      this.goToSlide(nextIndex);
    }
    
    prevSlide() {
      const prevIndex = this.currentIndex === 0 ? this.totalSlides - 1 : this.currentIndex - 1;
      this.goToSlide(prevIndex);
    }
    
    updateDots() {
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }
    
    startAutoplay() {
      this.autoplayInterval = setInterval(() => {
        this.nextSlide();
      }, 4000);
    }
    
    pauseAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
      }
    }
  }
  
  // Initialize carousel when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector('[data-ugc-carousel]');
    if (carousel) {
      new PDPUGCCarousel(carousel);
    }
  });
</script>
